{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>TIME</th>\n",
       "      <th>GEO</th>\n",
       "      <th>UNIT</th>\n",
       "      <th>NA_ITEM</th>\n",
       "      <th>Value</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>702</th>\n",
       "      <td>2008</td>\n",
       "      <td>Belgium</td>\n",
       "      <td>Chain linked volumes, index 2010=100</td>\n",
       "      <td>Gross domestic product at market prices</td>\n",
       "      <td>99.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>703</th>\n",
       "      <td>2008</td>\n",
       "      <td>Belgium</td>\n",
       "      <td>Chain linked volumes, index 2010=100</td>\n",
       "      <td>Value added, gross</td>\n",
       "      <td>99.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>704</th>\n",
       "      <td>2008</td>\n",
       "      <td>Belgium</td>\n",
       "      <td>Chain linked volumes, index 2010=100</td>\n",
       "      <td>Final consumption expenditure</td>\n",
       "      <td>97.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>705</th>\n",
       "      <td>2008</td>\n",
       "      <td>Belgium</td>\n",
       "      <td>Chain linked volumes, index 2010=100</td>\n",
       "      <td>Final consumption expenditure of general gover...</td>\n",
       "      <td>98.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>706</th>\n",
       "      <td>2008</td>\n",
       "      <td>Belgium</td>\n",
       "      <td>Chain linked volumes, index 2010=100</td>\n",
       "      <td>Individual consumption expenditure of general ...</td>\n",
       "      <td>96.8</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     TIME      GEO                                  UNIT  \\\n",
       "702  2008  Belgium  Chain linked volumes, index 2010=100   \n",
       "703  2008  Belgium  Chain linked volumes, index 2010=100   \n",
       "704  2008  Belgium  Chain linked volumes, index 2010=100   \n",
       "705  2008  Belgium  Chain linked volumes, index 2010=100   \n",
       "706  2008  Belgium  Chain linked volumes, index 2010=100   \n",
       "\n",
       "                                               NA_ITEM Value  \n",
       "702            Gross domestic product at market prices  99.6  \n",
       "703                                 Value added, gross  99.7  \n",
       "704                      Final consumption expenditure  97.2  \n",
       "705  Final consumption expenditure of general gover...  98.0  \n",
       "706  Individual consumption expenditure of general ...  96.8  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import dash\n",
    "from dash.dependencies import Input, Output\n",
    "import dash_core_components as dcc\n",
    "import plotly.graph_objs as go\n",
    "import dash_html_components as html\n",
    "app = dash.Dash(__name__)\n",
    "server = app.server\n",
    "app.css.append_css({\"external_url\": \"https://codepen.io/chriddyp/pen/bWLwgP.css\"})\n",
    "\n",
    "\n",
    "df = pd.read_csv('nama_10_gdp_1_Data.csv')\n",
    "dfnew = ~df.isin(['European Union (current composition)',\n",
    "              'European Union (without United Kingdom)',\n",
    "              'European Union (15 countries)',\n",
    "              'Euro area (EA11-2000, EA12-2006, EA13-2007, EA15-2008, EA16-2010, EA17-2013, EA18-2014, EA19)',\n",
    "              'Euro area (19 countries)',\n",
    "              'Euro area (12 countries)'])\n",
    "# df = df.rename(index={'Germany (until 1990 former territory of the FRG)': 'Germany'})\n",
    "df = df[dfnew]\n",
    "df.dropna(how='any',subset=[\"GEO\"],axis=0,inplace=True)\n",
    "df.drop('Flag and Footnotes',axis=1,inplace=True)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " * Running on http://127.0.0.1:8050/ (Press CTRL+C to quit)\n",
      "127.0.0.1 - - [03/Dec/2018 14:05:55] \"GET / HTTP/1.1\" 200 -\n",
      "127.0.0.1 - - [03/Dec/2018 14:05:59] \"GET /_dash-layout HTTP/1.1\" 200 -\n",
      "127.0.0.1 - - [03/Dec/2018 14:05:59] \"GET /_dash-dependencies HTTP/1.1\" 200 -\n",
      "127.0.0.1 - - [03/Dec/2018 14:06:01] \"POST /_dash-update-component HTTP/1.1\" 200 -\n",
      "127.0.0.1 - - [03/Dec/2018 14:06:01] \"POST /_dash-update-component HTTP/1.1\" 200 -\n",
      "127.0.0.1 - - [03/Dec/2018 14:06:01] \"GET /favicon.ico HTTP/1.1\" 200 -\n",
      "127.0.0.1 - - [03/Dec/2018 14:06:08] \"POST /_dash-update-component HTTP/1.1\" 200 -\n",
      "127.0.0.1 - - [03/Dec/2018 14:06:10] \"POST /_dash-update-component HTTP/1.1\" 200 -\n",
      "127.0.0.1 - - [03/Dec/2018 14:07:06] \"POST /_dash-update-component HTTP/1.1\" 200 -\n",
      "127.0.0.1 - - [03/Dec/2018 14:07:55] \"POST /_dash-update-component HTTP/1.1\" 200 -\n",
      "127.0.0.1 - - [03/Dec/2018 14:08:03] \"POST /_dash-update-component HTTP/1.1\" 200 -\n"
     ]
    }
   ],
   "source": [
    "app = dash.Dash()\n",
    "available_indicators = df['NA_ITEM'].unique()\n",
    "countries = df['GEO'].unique()\n",
    "timeline = df['TIME'].unique()\n",
    "\n",
    "app.layout = html.Div([\n",
    "    html.Div([\n",
    "\n",
    "        html.Div([\n",
    "            dcc.Dropdown(\n",
    "                id='xaxis-column',\n",
    "                options=[{'label': i, 'value': i} for i in available_indicators],\n",
    "                value='Gross domestic product at market prices'\n",
    "            )],style={'width': '48%', 'display': 'inline-block'}),\n",
    "        html.Div([\n",
    "            dcc.Dropdown(\n",
    "                id='yaxis-column',\n",
    "                options=[{'label': i, 'value': i} for i in available_indicators],\n",
    "                value='Final consumption expenditure'\n",
    "            )\n",
    "        ],\n",
    "        style={'width': '48%','float':'right','display': 'inline-block'})]),    \n",
    "        dcc.Graph(id='indicator-graphic'),\n",
    "     dcc.Slider(\n",
    "        id='year--slider',\n",
    "        min=df['TIME'].min(),\n",
    "        max=df['TIME'].max(),\n",
    "        value=df['TIME'].max(),\n",
    "        step=None,\n",
    "        marks={str(year): str(year) for year in df['TIME'].unique()}\n",
    "        ),\n",
    "\n",
    " html.Div([\n",
    "        html.Div([\n",
    "            dcc.Dropdown(\n",
    "                id='xaxis-column2',\n",
    "                options=[{'label': i, 'value': i} for i in available_indicators],\n",
    "                value='Gross domestic product at market prices'\n",
    "            )],style={'width': '48%', 'display': 'inline-block'}),\n",
    "        html.Div([\n",
    "            dcc.Dropdown(\n",
    "                id='yaxis-column2',\n",
    "                options=[{'label': i, 'value': i} for i in countries],\n",
    "                value='Belgium')],\n",
    "            style={'width': '48%', 'float':'right', 'display': 'inline-block'})\n",
    "    ]),\n",
    "\n",
    "    dcc.Graph(id='country-indicator-graphic')\n",
    "])\n",
    "\n",
    "@app.callback(\n",
    "    dash.dependencies.Output('indicator-graphic', 'figure'),\n",
    "    [dash.dependencies.Input('xaxis-column', 'value'),\n",
    "     dash.dependencies.Input('yaxis-column', 'value'),\n",
    "     dash.dependencies.Input('year--slider', 'value')])\n",
    "def update_graph(xaxis_column_name, yaxis_column_name,\n",
    "                 year_value):\n",
    "    dff = df[df['TIME'] == year_value]\n",
    "    \n",
    "    return {\n",
    "        'data': [go.Scatter(\n",
    "            x=dff[dff['NA_ITEM'] == xaxis_column_name]['Value'],\n",
    "            y=dff[dff['NA_ITEM'] == yaxis_column_name]['Value'],\n",
    "            text=dff[dff['NA_ITEM'] == yaxis_column_name]['GEO'],\n",
    "            mode='markers',\n",
    "            marker={\n",
    "                'size': 15,\n",
    "                'opacity': 0.5,\n",
    "                'line': {'width': 0.5, 'color': 'white'}\n",
    "            }\n",
    "        )],\n",
    "        'layout': go.Layout(\n",
    "            \n",
    "            xaxis={'title': xaxis_column_name},\n",
    "            yaxis={'title': yaxis_column_name},\n",
    "            margin={'l': 40, 'b': 40, 't': 20, 'r': 50},\n",
    "            hovermode='closest'\n",
    "        )\n",
    "    }\n",
    "\n",
    "@app.callback(\n",
    "    dash.dependencies.Output('country-indicator-graphic', 'figure'),\n",
    "    [dash.dependencies.Input('xaxis-column2', 'value'),\n",
    "     dash.dependencies.Input('yaxis-column2', 'value')])\n",
    "def update_graph(xaxis_column_name, yaxis_column_name):\n",
    "        return {\n",
    "        'data': [go.Scatter(\n",
    "            x=df[df['NA_ITEM'] == xaxis_column_name]['TIME'],\n",
    "            y=df[df['NA_ITEM'] == yaxis_column_name]['Value'],\n",
    "            text=df[df['NA_ITEM'] == yaxis_column_name]['GEO'],\n",
    "            mode='lines',\n",
    "            marker={\n",
    "                'size': 15,\n",
    "                'opacity': 0.5,\n",
    "                'line': {'width': 0.5, 'color': 'white'}\n",
    "            }\n",
    "        )],\n",
    "        'layout': go.Layout(\n",
    "            \n",
    "            xaxis={'title': xaxis_column_name},\n",
    "            yaxis={'title': yaxis_column_name},\n",
    "            margin={'l': 40, 'b': 40, 't': 20, 'r': 50},\n",
    "#             style={'float':'right'},\n",
    "            hovermode='closest'\n",
    "        )\n",
    "    }\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    app.run_server()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
